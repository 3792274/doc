
-------------------------------------------------
centos下彻底删除MYSQL 和重新安装MYSQL
1 删除Mysql
   yum remove  mysql mysql-server mysql-libs mysql-server;
    find / -name mysql 将找到的相关东西delete掉；
    rpm -qa|grep mysql(查询出来的东东yum remove掉)


2 安装Mysql
     yum install  mysql mysql-server mysql-libs mysql-server;
---------------------------------------------------      
mysqld --skip-grant-tables
mysql> GRANT ALL PRIVILEGES ON *.* TO root@"%" IDENTIFIED BY "root";
mysql> flush privileges;

------------------------------------------------
MySQL安装-二进制：

1.下载 https://dev.mysql.com/downloads/mysql/
   wget  --no-check-certificate https://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-5.7.21-linux-glibc2.12-x86_64.tar.gz

2.安装依赖包 yum install -y libaio 
3.创建一个mysql用户和组: groupadd mysql  &&  useradd -r -g mysql -s /bin/false mysql  (对服务器主机没有登录权限的用户)  查看：cat /etc/group | grep mysql   && cat /etc/passwd |grep mysql
4.解压到指定目录   tar -zxvf mysql-5.7.21-linux-glibc2.12-x86_64.tar.gz -C /opt  &&  cd /opt  &&   mv mysql-5.7.21-linux-glibc2.12-x86_64 mysql-5.7.21
5.配置环境变量   echo "export PATH=$PATH:/opt/mysql-5.7.21/bin" >> /etc/profile  && source /etc/profile
6.配置数据库目录
      数据目录：/opt/mysql-5.7.21/data 
      参数文件my.cnf：/opt/mysql-5.7.21/etc/my.cnf 
      错误日志log-error：/opt/mysql-5.7.21/log/mysql_error.log 
      二进制日志log-bin：/opt/mysql-5.7.21/log/mysql_bin.log 
      慢查询日志slow_query_log_file：/opt/mysql-5.7.21/log/mysql_slow_query.log 
      套接字socket文件：/opt/mysql-5.7.21/run/mysql.sock 
      pid文件：/opt/mysql-5.7.21/run/mysql.pid 

      创建目录：
      shell> mkdir -p /opt/mysql-5.7.21/{data,log,etc,run}    --->  mysqld --verbose --help|grep basedir
      shell> chown -R mysql:mysql /opt/mysql-5.7.21
      shell> chmod 750 /opt/mysql-5.7.21/{data,log,etc,run}
      shell> rm -rf /etc/my.cnf

7.配置my.cnf文件--->在/opt/mysql-5.7.21/etc/  下创建my.cnf文件，加入如下参数，其他参数根据需要配置
shell> touch /opt/mysql-5.7.21/etc/my.cnf
shell> chown mysql:mysql /opt/mysql-5.7.21/etc/my.cnf   --> mysql --help | grep my.cnf  -->  mysql --help | grep 'Default options' -A 1   --->  ps aux|grep mysql|grep 'my.cnf'  _>>

[client]
port =    3306
socket = /opt/mysql-5.7.21/run/mysql.sock

[mysqld]
server-id                       =1
port                            =   3306
tmpdir                          =   /tmp
socket                          =   /opt/mysql-5.7.21/run/mysql.sock
pid_file                        =   /opt/mysql-5.7.21/run/mysql.pid
basedir                         =   /opt/mysql-5.7.21 
datadir                         =   /opt/mysql-5.7.21/data
log-error                       =   /opt/mysql-5.7.21/log/mysql_error.log   #数据库错误日志文件
log-bin                         =   /opt/mysql-5.7.21/log/mysql_bin.log     #二进制日志(主从)
slow_query_log_file             =   /opt/mysql-5.7.21/log/mysql_slow_query.log

default_storage_engine          = InnoDB
max_allowed_packet              = 128M
max_connections                 = 2048            #最大连接数
max_connect_errors              = 1000            #最大错误连接数
open_files_limit                = 65535
skip-name-resolve
lower_case_table_names          =1                #是否对sql语句大小写敏感，1表示不敏感
character-set-server            = utf8mb4
collation-server                = utf8mb4_unicode_ci
init_connect                    ='SET NAMES utf8mb4'
innodb_buffer_pool_size         = 128M
innodb_log_file_size            = 128M
innodb_file_per_table           = 1
key_buffer_size                 = 128M
tmp_table_size                  = 512M       #内部内存临时表的最大值 ，设置成128M。
max_heap_table_size             = 512M
query_cache_type                = 0               #禁用mysql的缓存查询结果集功能
query_cache_size                = 0
max_allowed_packet              = 128M            #SQL数据包发送的大小，如果有BLOB对象建议修改成1G
interactive_timeout             = 1800            #MySQL连接闲置超过一定时间后(单位：秒)将会被强行关闭
wait_timeout                    = 1800
explicit_defaults_for_timestamp = true            #TIMESTAMP如果没有显示声明NOT NULL，允许NULL值
innodb_flush_log_at_trx_commit  = 0

slow_query_log                  = 1               #慢查询sql日志设置
long_query_time                 = 5
log_queries_not_using_indexes   = 1               #检查未使用到索引的sql
log_throttle_queries_not_using_indexes = 5        #针对log_queries_not_using_indexes开启后，记录慢sql的频次、每分钟记录的条数
auto_increment_increment=2                        #多少台服务器
auto_increment_offset=1                           #自增长步长,【各服务器不同】,防止冲突

############################### MASTER 配置#########################################################
binlog-ignore-db =information_schema           #忽略同步日志的数据库  
binlog-ignore-db =mysql
binlog-ignore-db =performance_schema
binlog-ignore-db =sys
expire_logs_days = 5                           #mysql binlog日志文件保存的过期时间，过期后自动删除
binlog_format = ROW                            #binlog记录内容的方式，记录被操作的每一行
binlog_row_image = minimal                     #对于binlog_format = ROW模式时，减少记录日志的内容，只记录受影响的列
master_info_repository = TABLE                 #master status and connection information输出到表mysql.slave_master_info中
relay_log_info_repository = TABLE              #the slave's position in the relay logs输出到表mysql.slave_relay_log_info中
#binlog-do-db=                                 #需要同步日志的数据库

############################### SLAVE 配置#########################################################
log-slave-updates                                #级联复制，从数据库会同步更新主数据库日志
relay_log_recovery = 1                           #中继日志relay-log可以自我修复
slave_skip_errors = ddl_exist_errors             #主从复制时忽略的错误
slave-skip-errors=all                            #跳过出现的错误 
slave-net-timeout=600                            #从数据库同步超时时间
replicate-ignore-db=information_schema           #不需要复制的数据库
replicate-ignore-db=mysql 
replicate-ignore-db=performance_schema 
replicate-ignore-db=sys 
#replicate-do-db=                                #需要复制的数据库

   

8.初始化
shell> mysqld --defaults-file=/opt/mysql-5.7.21/etc/my.cnf  --initialize --user=mysql --basedir=/opt/mysql-5.7.21 --datadir=/opt/mysql-5.7.21/data
查看临时密码   ---->   shell> grep 'temporary password' /opt/mysql-5.7.21/log/mysql_error.log 
生成ssl        ---->   shell> mysql_ssl_rsa_setup  --defaults-file=/opt/mysql-5.7.21/etc/my.cnf  --basedir=/opt/mysql-5.7.21 --datadir=/opt/mysql-5.7.21/data/


9.配置服务，使用systemctl管理
shell> cd /usr/lib/systemd/system
shell> touch mysqld.service 

# Copyright (c) 2015, 2016, Oracle and/or its affiliates. All rights reserved.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 2 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA
#
# systemd service file for MySQL forking server
#

[Unit]
Description=MySQL Server
Documentation=man:mysqld(8)
Documentation=http://dev.mysql.com/doc/refman/en/using-systemd.html
After=network.target
After=syslog.target

[Install]
WantedBy=multi-user.target

[Service]
User=mysql
Group=mysql
Type=forking
#PIDFile=/opt/mysql-5.7.21/run/mysql.pid

# Disable service start and stop timeout logic of systemd for mysqld service.
TimeoutSec=0

# Execute pre and post scripts as root
PermissionsStartOnly=true

# Needed to create system tables
#ExecStartPre=/usr/bin/mysqld_pre_systemd

# Start main service
#--pid-file=/opt/mysql-5.7.21/run/mysql.pid   --bind-address=127.0.0.1 --basedir=/opt/mysql-5.7.21 --datadir=/opt/mysql-5.7.21/data
ExecStart=/opt/mysql-5.7.21/bin/mysqld  --defaults-file=/opt/mysql-5.7.21/etc/my.cnf --daemonize     $MYSQLD_OPTS

# Use this to switch malloc implementation
EnvironmentFile=-/etc/sysconfig/mysql

# Sets open_files_limit
LimitNOFILE = 65535
Restart=on-failure
RestartPreventExitStatus=1
PrivateTmp=false

让systemctl加载配置服务--->
shell> systemctl daemon-reload
shell> systemctl enable mysqld.service
shell> systemctl is-enabled mysqld

10.启动MySQL服务
shell> systemctl start mysqld.service 
shell> ln -s /opt/mysql-5.7.21/run/mysql.sock /tmp/mysql.sock



11.MySQL用户初始化-安全设置
shell> mysql_secure_installation  || ./mysql_secure_installation -S /opt/mysql-5.7.21-3307/run/mysql.sock
mysql> use mysql  
mysql> update user set host='%' where user='root';  
mysql> GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' WITH GRANT OPTION;  
mysql> flush privileges ;


12.导入时区
shell> mysql_tzinfo_to_sql /usr/share/zoneinfo | mysql -u root -p mysql

13.验证安装
shell> mysqladmin version -u root -p
shell> mysqladmin variables -uroot -p  查看变量 

14.开放3306端口
##Add
firewall-cmd --permanent --zone=public --add-port=3306/tcp
 
##Reload
firewall-cmd --reload
 
## 检查是否生效
firewall-cmd --zone=public --query-port=3306/tcp
 
## 列出所有的开放端口
firewall-cmd --list-all

-------------------------------------------------------------------------------------------------------------------
MySql主从配置：
1.master
GRANT FILE ON *.* TO 'slave'@'%' IDENTIFIED BY 'MySQLadmin1!';
GRANT REPLICATION SLAVE ON *.* TO 'slave'@'%' IDENTIFIED BY 'MySQLadmin1!';  #分配复制权限
FLUSH PRIVILEGES;
show master status \G;

2.slave
stop slave; #若是数据库已经开启过主从同步，则需要停止，新安装的数据库不需要此步骤
change master to master_host='172.17.0.3',master_user='slave',master_password='MySQLadmin1!',master_port=3306,master_log_file='mysql-bin.000001', master_log_pos=846;
start slave;            #配置完成，开启同步
show slave status \G;   #查看同步状态  --> Slave_IO_Running:YES / Slave_SQL_Running:YES
 



-------------------------------------------------------------------------------------------------------------------
Centos 安装rpm安装：https://linode.com/docs/databases/mysql/how-to-install-mysql-on-centos-7/   
			       http://blog.brew.com.hk/installing-mysql-on-centos/
rpm -qa | grep mysql 
rpm -e --nodeps mysql-community-release-el7-5.noarch

1.下载源： wget https://repo.mysql.com//mysql57-community-release-el7-11.noarch.rpm
2.安装源： rpm -Uvh mysql57-community-release-el7-11.noarch.rpm  / sudo yum localinstall mysql57-community-release-el7-11.noarch.rpm
3.安装启动： sudo yum install mysql-server/sudo yum install mysql-community-server   &&    sudo systemctl start mysqld/sudo service mysqld start
4.设置密码：grep 'temporary password' /var/log/mysqld.log   /  mysql -uroot -p12369
5.改密码： set global validate_password_policy=0; && set global validate_password_length=1;   &&   ALTER USER 'root'@'localhost' IDENTIFIED BY '12369';  FLUSH PRIVILEGES;  或者：mysql_secure_installation
6.允许访问:   use mysql   && update user set host='%' where user='root';  GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' WITH GRANT OPTION; 
select @@log_error;
select @@validate_password_length;
SHOW VARIABLES LIKE 'validate_password%';

忘记密码：
vim  /etc/my.cnf --->最后添加： skip-grant-tables
  ( service mysqld restart )
 USE mysql ; 
UPDATE user SET authentication_string = password('12369') WHERE User = 'root' ; 
 flush privileges ; 


更改密码：
ALTER USER 'root'@'localhost' IDENTIFIED BY '12369'

添加用户：
create user 'testuser'@'localhost' identified by 'password';
grant all on testdb.* to 'testuser'@'localhost';


卸载
  1 删除Mysql
   yum remove  mysql mysql-server mysql-libs mysql-server;
    find / -name mysql 将找到的相关东西delete掉；
    rpm -qa|grep mysql(查询出来的东东yum remove掉)
2 安装Mysql
     yum install  mysql mysql-server mysql-libs mysql-server;

-------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------
Docker Mysql 安装
一、Windows
1.创建mysql配置文件：D:\DockerData\mysql-3306\my.cnf  &  D:\DockerData\mysql-3307\my.cnf

[mysqld]
server-id                       =1  #【主从必须修改】
port                            =   3306
datadir                         =  /var/lib/mysql
log-error                       =  /var/lib/mysql/mysql_error.log   #数据库错误日志文件
log-bin                         =  /var/lib/mysql/mysql_bin.log     #二进制日志(主从)
slow_query_log_file             =  /var/lib/mysql/mysql_slow_query.log

default_storage_engine          = InnoDB
max_allowed_packet              = 128M
max_connections                 = 2048            #最大连接数
max_connect_errors              = 1000            #最大错误连接数
open_files_limit                = 65535
skip-name-resolve
lower_case_table_names          =1                #是否对sql语句大小写敏感，1表示不敏感
character-set-server            = utf8mb4
collation-server                = utf8mb4_unicode_ci
init_connect                    ='SET NAMES utf8mb4'
innodb_buffer_pool_size         = 128M
innodb_log_file_size            = 128M
innodb_file_per_table           = 1
key_buffer_size                 = 128M
tmp_table_size                  = 512M       #内部内存临时表的最大值 ，设置成128M。
max_heap_table_size             = 512M
query_cache_type                = 0               #禁用mysql的缓存查询结果集功能
query_cache_size                = 0
max_allowed_packet              = 128M            #SQL数据包发送的大小，如果有BLOB对象建议修改成1G
interactive_timeout             = 1800            #MySQL连接闲置超过一定时间后(单位：秒)将会被强行关闭
wait_timeout                    = 1800
explicit_defaults_for_timestamp = true            #TIMESTAMP如果没有显示声明NOT NULL，允许NULL值
innodb_flush_log_at_trx_commit  = 0

slow_query_log                  = 1               #慢查询sql日志设置
long_query_time                 = 5
log_queries_not_using_indexes   = 1               #检查未使用到索引的sql
log_throttle_queries_not_using_indexes = 5        #针对log_queries_not_using_indexes开启后，记录慢sql的频次、每分钟记录的条数

auto_increment_increment=2                        #多少台服务器
auto_increment_offset=1                           #自增长步长,【各服务器不同】,防止冲突

############################### MASTER 配置#########################################################
binlog-ignore-db =information_schema           #忽略同步日志的数据库  
binlog-ignore-db =mysql
binlog-ignore-db =performance_schema
binlog-ignore-db =sys
expire_logs_days = 5                           #mysql binlog日志文件保存的过期时间，过期后自动删除
binlog_format = ROW                            #binlog记录内容的方式，记录被操作的每一行
binlog_row_image = minimal                     #对于binlog_format = ROW模式时，减少记录日志的内容，只记录受影响的列
master_info_repository = TABLE                 #master status and connection information输出到表mysql.slave_master_info中
relay_log_info_repository = TABLE              #the slave's position in the relay logs输出到表mysql.slave_relay_log_info中
#binlog-do-db=                                 #需要同步日志的数据库

############################### SLAVE 配置#########################################################
log-slave-updates                                #级联复制，从数据库会同步更新主数据库日志
relay_log_recovery = 1                           #中继日志relay-log可以自我修复
slave_skip_errors = ddl_exist_errors             #主从复制时忽略的错误
slave-skip-errors=all                            #跳过出现的错误 
slave-net-timeout=600                            #从数据库同步超时时间
replicate-ignore-db=information_schema           #不需要复制的数据库
replicate-ignore-db=mysql 
replicate-ignore-db=performance_schema 
replicate-ignore-db=sys 
#replicate-do-db=                                #需要复制的数据库



2.创建编排文件：D:\DockerData\docker-compose.yml

version: '2'
services:

  mysql3306:
    image: mysql:5.7.21
    container_name: mysql3306
    volumes:
      - D:/DockerData/mysql-3306/my.cnf:/etc/mysql/my.cnf:ro
      - D:/DockerData/mysql-3306/mysql/:/var/lib/mysql/:rw
    ports:
      - "3306:3306"
    networks:
      mysql:
        ipv4_address: 172.18.0.2
    ulimits:
      nproc: 65535
    hostname: mysql3306
    mem_limit: 1024m
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: 12369
      MYSQL_USER: tony
      MYSQL_PASSWORD: 12369 

  mysql3307:
    image: mysql:5.7.21
    container_name: mysql3307
    volumes:
      - D:/DockerData/mysql-3307/my.cnf:/etc/mysql/my.cnf:ro
      - D:/DockerData/mysql-3307/mysql/:/var/lib/mysql/:rw
    ports:
      - "3307:3306"
    networks:
      mysql:
        ipv4_address: 172.18.0.3
    ulimits:
      nproc: 65535
    hostname: mysql3307
    mem_limit: 1024m
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: 12369
      MYSQL_USER: tony
      MYSQL_PASSWORD: 12369
      
networks:
  mysql:
    driver: bridge
    ipam:
      driver: default
      config:
      - subnet: 172.18.0.0/24
        gateway: 172.18.0.1



3.启动  SET COMPOSE_CONVERT_WINDOWS_PATHS=1  &&  docker-compose down  &&    docker-compose up -d

  

4.查看docker ip
docker inspect --format='{{.NetworkSettings.IPAddress}}' mysql3306
docker inspect --format='{{.NetworkSettings.IPAddress}}' $(docker ps -a -q)  
docker inspect mysql3306


-------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------
Docker Mysql 安装
二、Centos
0.安装docker 及  docker-compose   
https://docs.docker.com/install/linux/docker-ce/centos/
https://docs.docker.com/compose/install/
 

1.创建mysql配置文件：mkdir -p /opt/mysql/mysql-3306/ && vim /opt/mysql/mysql-3306/my.cnf   

[mysqld]
server-id                       =1
port                            =   3306
datadir                         =  /var/lib/mysql
log-error                       =  /var/lib/mysql/mysql_error.log   #数据库错误日志文件
log-bin                         =  /var/lib/mysql/mysql_bin.log     #二进制日志(主从)
slow_query_log_file             =  /var/lib/mysql/mysql_slow_query.log

default_storage_engine          = InnoDB
max_allowed_packet              = 128M
max_connections                 = 2048            #最大连接数
max_connect_errors              = 1000            #最大错误连接数
open_files_limit                = 65535
skip-name-resolve
lower_case_table_names          =1                #是否对sql语句大小写敏感，1表示不敏感
character-set-server            = utf8mb4
collation-server                = utf8mb4_unicode_ci
init_connect                    ='SET NAMES utf8mb4'
innodb_buffer_pool_size         = 128M
innodb_log_file_size            = 128M
innodb_file_per_table           = 1
key_buffer_size                 = 128M
tmp_table_size                  = 512M       #内部内存临时表的最大值 ，设置成128M。
max_heap_table_size             = 512M
query_cache_type                = 0               #禁用mysql的缓存查询结果集功能
query_cache_size                = 0
max_allowed_packet              = 128M            #SQL数据包发送的大小，如果有BLOB对象建议修改成1G
interactive_timeout             = 1800            #MySQL连接闲置超过一定时间后(单位：秒)将会被强行关闭
wait_timeout                    = 1800
explicit_defaults_for_timestamp = true            #TIMESTAMP如果没有显示声明NOT NULL，允许NULL值
innodb_flush_log_at_trx_commit  = 0

slow_query_log                  = 1               #慢查询sql日志设置
long_query_time                 = 5
log_queries_not_using_indexes   = 1               #检查未使用到索引的sql
log_throttle_queries_not_using_indexes = 5        #针对log_queries_not_using_indexes开启后，记录慢sql的频次、每分钟记录的条数

auto_increment_increment=2                        #多少台服务器
auto_increment_offset=1                           #自增长步长,【各服务器不同】,防止冲突

############################### MASTER 配置#########################################################
binlog-ignore-db =information_schema           #忽略同步日志的数据库  
binlog-ignore-db =mysql
binlog-ignore-db =performance_schema
binlog-ignore-db =sys
expire_logs_days = 5                           #mysql binlog日志文件保存的过期时间，过期后自动删除
binlog_format = ROW                            #binlog记录内容的方式，记录被操作的每一行
binlog_row_image = minimal                     #对于binlog_format = ROW模式时，减少记录日志的内容，只记录受影响的列
master_info_repository = TABLE                 #master status and connection information输出到表mysql.slave_master_info中
relay_log_info_repository = TABLE              #the slave's position in the relay logs输出到表mysql.slave_relay_log_info中
#binlog-do-db=                                 #需要同步日志的数据库

############################### SLAVE 配置#########################################################
log-slave-updates                                #级联复制，从数据库会同步更新主数据库日志
relay_log_recovery = 1                           #中继日志relay-log可以自我修复
slave_skip_errors = ddl_exist_errors             #主从复制时忽略的错误
slave-skip-errors=all                            #跳过出现的错误 
slave-net-timeout=600                            #从数据库同步超时时间
replicate-ignore-db=information_schema           #不需要复制的数据库
replicate-ignore-db=mysql 
replicate-ignore-db=performance_schema 
replicate-ignore-db=sys 
#replicate-do-db=                                #需要复制的数据库

2.创建编排文件：  vim /opt/mysql/docker-compose.yml

version: '2'
services:

  mysql3306:
    image: mysql:5.7.21
    container_name: mysql3306
    volumes:
      - /opt/mysql/mysql-3306/my.cnf:/etc/mysql/my.cnf:ro
      - /opt/mysql/mysql-3306/mysql/:/var/lib/mysql/:rw
      - /etc/localtime:/etc/localtime:rw
      - /etc/hosts:/etc/hosts:ro
    ports:
      - "3306:3306"
    networks:
      mysql:
        ipv4_address: 172.18.0.2
    ulimits:
      nproc: 65535
    hostname: mysql3306
    mem_limit: 1024m
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: 12369
      MYSQL_USER: tony
      MYSQL_PASSWORD: 12369 

  mysql3307:
    image: mysql:5.7.21
    container_name: mysql3307
    volumes:
      - /opt/mysql/mysql-3307/my.cnf:/etc/mysql/my.cnf:ro
      - /opt/mysql/mysql-3307/mysql/:/var/lib/mysql/:rw
      - /etc/localtime:/etc/localtime:rw
      - /etc/hosts:/etc/hosts:ro
    ports:
      - "3307:3306"
    networks:
      mysql:
        ipv4_address: 172.18.0.3
    ulimits:
      nproc: 65535
    hostname: mysql3307
    mem_limit: 1024m
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: 12369
      MYSQL_USER: tony
      MYSQL_PASSWORD: 12369

  adminer:
    image: adminer
    restart: always
    ports:
      - "8080:8080"
    networks:
      mysql:
        ipv4_address: 172.18.0.10

networks:
  mysql:
    driver: bridge
    ipam:
      driver: default
      config:
      - subnet: 172.18.0.0/24
        gateway: 172.18.0.1

 
3.启动   
firewall-cmd --zone=public --add-port=3306/tcp --permanent  && firewall-cmd --zone=public --add-port=3307/tcp --permanent && firewall-cmd --reload
docker-compose down  &&    docker-compose up -d  (docker network prune )

MySql主从配置：
1.master
GRANT FILE ON *.* TO 'slave'  IDENTIFIED BY 'MySQLadmin1!';
GRANT REPLICATION SLAVE ON *.* TO 'slave'  IDENTIFIED BY 'MySQLadmin1!';
FLUSH PRIVILEGES;
show master status;

2.slave
stop slave;
change master to master_host='172.18.0.2',master_user='slave',master_password='MySQLadmin1!',master_port=3306,master_log_file='mysql_bin.000003', master_log_pos=845;
start slave; 
show slave status;
 

  

4.查看docker ip
docker inspect --format='{{.NetworkSettings.IPAddress}}' $(docker ps -a -q)  
docker inspect mysql3306

 


-------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------

docker Mysql
https://hub.docker.com/_/mysql/

service docker restart
systemctl enable docker 

存出镜像
docker save -o mysql.tar mysql:latest

载入镜像
docker load --input mysql.tar
docker load < mysql.tar

iptables -t filter -N DOCKER
iptables -t nat -N DOCKER
chcon -Rt svirt_sandbox_file_t /dataDir/payDataBase
 

docker run -d -P --name pay-mysql  -v /dataDir/payDataBase:/var/lib/mysql  -p 3306:3306 -e MYSQL_ROOT_PASSWORD=12369  mysql
docker run -d -P --name pay-mysql  -v D:/MysqlData:/var/lib/mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=12369  mysql

 
docker logs pay-mysql
docker exec -it pay-mysql bash

iptables -L
iptables -t filter -L -v -n
iptables -t nat -L -v -n
cat /etc/sysconfig/iptables-config

chmod -R 775 /var/lib/mysql
chmod -R 777 /var/lib/mysql



 --------------------------------------------------------------
mysqladmin variables
mysqld --verbose --help
 docker run -it --rm mysql:latest --verbose --help
Default options are read from the following files in the given order:
/etc/my.cnf /etc/mysql/my.cnf ~/.my.cnf





--------------------------------------------------------------------------------------

以下例子 当时候 select * from wl_tagindex where byname=’f’ order by id limit 300000,10 执行时间是 3.21s
   优化后：
   select * from (
               select id from wl_tagindex
               where byname=’f’ order by id limit 300000,10
   ) a
   left join wl_tagindex b on a.id=b.id
   执行时间为 0.11s 速度明显提升

-------------------------------------------------------------------------------------------
Could not retrieve transation read-only status server
show VARIABLES like '%max_allowed_packet%';  4194304
修改：my.cnf-》 max_allowed_packet = 20M    （查找文件：mysql --help | grep my.cnf）


 mysqld --max_allowed_packet=32M

    查看mysql的事物隔离级别 SHOW VARIABLES LIKE '%iso%';
could not retrieve transation read-only status server

------------------------------------------------------------------------------------------------
开启mysql查询缓存
show variables like '%query_cache%';  （query_cache_type 为 ON 表示已经开启）

vi /etc/my.cnf  --》
query_cache_size = 20M
query_cache_type = ON

 service mysql restart

或者 
mysql> select @@query_cache_type;
mysql> set session query_cache_type=off
mysql> set session query_cache_type=on;



 其中各个参数的意义如下：  

Qcache_free_blocks：缓存中相邻内存块的个数。数目大说明可能有碎片。FLUSH QUERY CACHE会对缓存中的碎片进行整理，从而得到一个空闲块。  
Qcache_free_memory：缓存中的空闲内存。  
Qcache_hits：每次查询在缓存中命中时就增大  
Qcache_inserts：每次插入一个查询时就增大。命中次数除以插入次数就是不中比率。  
Qcache_lowmem_prunes：缓存出现内存不足并且必须要进行清理以便为更多查询提供空间的次数。这个数字最好长时间来看;如果这个 数字在不断增长，就表示可能碎片非常严重，或者内存很少。(上面的 free_blocks和free_memory可以告诉您属于哪种情况)  
Qcache_not_cached：不适合进行缓存的查询的数量，通常是由于这些查询不是 SELECT 语句或者用了now()之类的函数。  
Qcache_queries_in_cache：当前缓存的查询(和响应)的数量。  
Qcache_total_blocks：缓存中块的数量。 

对于某些不想使用缓存的语句，可以这样使用：
select SQL_NO_CACHE count(*) from users where email = 'hello';

------------------------------------------------------------------------
myql 自动提交
mysql> show variables like 'autocommit';
mysql> set autocommit = 0;    //值0和OFF都是一样的，当然，1也就表示ON


查询数据库引擎 show engines;
更改：在[mysqld]后面添加default-storage-engine=InnoDB，重启服务，
create table mytbl(id int primary key,   name varchar(50))type=MyISAM;   或者 alter table mytbl2 type = InnoDB;
检查：show table status from mytest; 
show variables like '%storage_engine%';

----------------------------------------------------------------------
慢查询   -  http://www.cnblogs.com/kerrycode/p/5593204.html
vim /etc/my.cnf
slow_query_log=1
slow-query-log-file=/var/lib/mysql/sg03-pay-rest-pprod-002-slow.log
long_query_time=2


show variables like "%long%";
show variables like "%slow%";

set global long_query_time=2; 
set global slow_query_log=1;
set global slow_query_log_file="/var/lib/mysql/sg03-pay-rest-pprod-002-slow.log";


------------------------------------------------------------------
buffer pool 预热  
show engine innodb status\G
show variables like "%innodb_buffer_pool%";
set global innodb_buffer_pool_dump_now=on;
set global innodb_buffer_pool_load_now=on;

SET GLOBAL innodb_buffer_pool_size=8589934592;
select 8*1024 / (16*128);



-----------------------------------------
锁表-备份
mysql>FLUSH  TABLES   WITH   READ   LOCK;  
# mysqldump  -uroot  -p --all-databases -l -F  >all_db.sql  
mysql>UNLOCK  TABLES;
#scp all_db.sql root@192.168.1.111:/tmp 
# mysql -uroot -p  </tmp/all_db.sql 

-----------------------------------------
表容量过大(The table is full )
SHOW TABLE STATUS

解决方法1： 
执行ALTER TABLE res_pay_list MAX_ROWS=1000000000; 

解决方法2： 
修改Mysql的配置文件/etc/my.cnf，在[mysqld]下添加/修改两行(下面的值仅供参考,请根据实际情况酌情处理)： 
tmp_table_size = 256M // 临时表大小 
max_heap_table_size = 256M // 内存表大小 

系统默认是16M，别忘记重新启动mysql。 

 